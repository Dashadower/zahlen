@@grammar::Zahlen
@@eol_comments :: /#.*?$/

start::Program = { statements+:stmts }+ $;

expression = intexpr
    | boolexpr
    ;

intexpr = addition_expr
    | multiplication
    ;

addition_expr::BinaryIntExpr = left:multiplication op:('+' | '-') ~ right:intexpr;

multiplication = multiplication_expr
    | int_factor
    ;

multiplication_expr::BinaryIntExpr = left:multiplication op:('*' | '/') ~ right:int_factor;

int_factor = integer
    | varname
    ;

boolexpr = logical_expr
    | comparison
    ;

logical_expr::BinaryBoolExpr = left:comparison op:('&&' | '||') right:boolexpr;

comparison = comparison_expr
    | bool_factor
    ;

comparison_expr::BinaryBoolExpr = left:intexpr op:('==' | '!=' | '>=' | '<=' | '<' | '>') right:expression
    ;

bool_factor = bool_value
    | intexpr
    ;

bool_value::Boolean = value:'true'
    | value:'false'
    ;

labeled_statement::LabeledStatement = label:label ':' ~ stmt:stmt;

stmts = @:stmt ';'
    | @:labeled_statement ';'
    ;

stmt =
    | assignment
    | skip
    | ifelse
    | goto
    | print
    ;

assignment_rhs = intexpr
    | varname
    | integer
    ;

assignment::Assignment = varname:varname '=' rhs:assignment_rhs;
skip::Skip = 'skip';
ifelse::IfElse = 'ifelse' '(' ~ pred:boolexpr ',' true_stmt:stmt ',' false_stmt:stmt ')';
goto::GoTo = 'goto' label:label;
print::Print = 'print' '(' varname:varname ')';

integer::Integer = value:(/\d+/);

varname::Variable = varname:identifier;
label = identifier;

identifier = /[a-zA-Z_][a-zA-Z0-9_]*/;
