@@grammar::Zahlen
@@eol_comments :: /#.*?$/
@@parseinfo :: True

start::Program = { statements:toplevel_statements }+ $;

expression = int_expr
    | bool_expr
    ;

int_expr = addition_expr
    | multiplication
    ;

addition_expr::BinaryIntExpr = left:int_expr op:('+' | '-') ~ right:multiplication;

multiplication = multiplication_expr
    | int_factor
    ;

multiplication_expr::BinaryIntExpr = left:multiplication op:('*' | '/') ~ right:int_factor;

int_factor = integer
    | array_index
    | varname
    ;

bool_expr = logical_expr
    | comparison
    ;

logical_expr::BinaryBoolExpr = left:comparison op:('&&' | '||') ~ right:bool_expr;

comparison = comparison_expr
    | bool_factor
    ;

comparison_expr::BinaryBoolExpr = left:int_expr op:('==' | '!=' | '>=' | '<=' | '<' | '>') ~ right:expression
    ;

bool_factor = bool_value
    | int_expr
    ;

bool_value::Boolean = value:'true'
    | value:'false'
    ;

toplevel_statements =
    | @:while
    | @:statement ~ ';' ;

statement =
    skip
    | ifelse
    | while
    | print
    | assignment
    ;

assignment_rhs = int_expr
    | varname
    | integer
    | array
    ;

array::Array = '{' ~ elements:array_elements '}';
array_elements = @+:array_element {',' ~ @+:array_element}*;
array_element = array
    | int_expr
    ;

array_index::ArrayIndex = varname:(array_index | varname) '[' ~ index:int_expr ']';

assignment::Assignment = varname:varname '=' ~ rhs:assignment_rhs;
skip::Skip = 'skip';
ifelse::IfElse = 'ifelse' '(' ~ pred:bool_expr ',' true_statement:statement ',' false_statement:statement ')';
print::Print = 'print' ~ '(' expression:expression ')';

while::While = 'while' '(' ~ pred:bool_expr ')' '{' {statements:toplevel_statements}+ '}';

integer::Integer = value:(/\d+/);

varname::Variable = varname:identifier;

identifier = /[a-zA-Z_][a-zA-Z0-9_]*/;
