#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class ZahlenBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class ZahlenParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu('Program')
    def _start_(self):  # noqa

        def block0():
            self._stmts_()
            self.add_last_node_to_name('statements')
        self._positive_closure(block0)
        self._check_eof()

        self._define(
            [],
            ['statements']
        )

    @tatsumasu()
    @leftrec
    def _intexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._intexpr_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        self._error(
                            'expecting one of: '
                            "'+' '-'"
                        )
                self.name_last_node('op')
                self._cut()
                self._int_term_()
                self.name_last_node('right')

                self._define(
                    ['left', 'op', 'right'],
                    []
                )
            with self._option():
                self._int_term_()
            self._error(
                'expecting one of: '
                '<int_factor> <int_term> <intexpr>'
            )

    @tatsumasu()
    @leftrec
    def _int_term_(self):  # noqa
        with self._choice():
            with self._option():
                self._int_term_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('*')
                        with self._option():
                            self._token('/')
                        self._error(
                            'expecting one of: '
                            "'*' '/'"
                        )
                self.name_last_node('op')
                self._cut()
                self._int_factor_()
                self.name_last_node('right')

                self._define(
                    ['left', 'op', 'right'],
                    []
                )
            with self._option():
                self._int_factor_()
            self._error(
                'expecting one of: '
                '<int_factor> <int_term> <integer>'
                '<varname>'
            )

    @tatsumasu()
    def _int_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._integer_()
            with self._option():
                self._varname_()
            self._error(
                'expecting one of: '
                '<identifier> <integer> <varname> \\d+'
            )

    @tatsumasu()
    @leftrec
    def _boolexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._boolexpr_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('&&')
                        with self._option():
                            self._token('||')
                        self._error(
                            'expecting one of: '
                            "'&&' '||'"
                        )
                self.name_last_node('op')
                self._bool_subexpr_()
                self.name_last_node('right')

                self._define(
                    ['left', 'op', 'right'],
                    []
                )
            with self._option():
                self._bool_subexpr_()
            self._error(
                'expecting one of: '
                '<bool_factor> <bool_subexpr> <boolexpr>'
                '<int_term> <intexpr>'
            )

    @tatsumasu()
    def _bool_subexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._intexpr_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('==')
                        with self._option():
                            self._token('!=')
                        with self._option():
                            self._token('>')
                        with self._option():
                            self._token('>=')
                        with self._option():
                            self._token('<')
                        with self._option():
                            self._token('<=')
                        self._error(
                            'expecting one of: '
                            "'!=' '<' '<=' '==' '>' '>='"
                        )
                self.name_last_node('op')
                self._intexpr_()
                self.name_last_node('right')

                self._define(
                    ['left', 'op', 'right'],
                    []
                )
            with self._option():
                self._bool_factor_()
            self._error(
                'expecting one of: '
                "'false' 'true' <bool_factor>"
                '<int_factor> <int_term> <intexpr>'
            )

    @tatsumasu()
    def _bool_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error(
                'expecting one of: '
                "'false' 'true'"
            )

    @tatsumasu()
    def _stmts_(self):  # noqa
        with self._choice():
            with self._option():
                self._labled_statement_()
                self.name_last_node('stmt')
                self._token(';')

                self._define(
                    ['stmt'],
                    []
                )
            with self._option():
                self._stmt_()
                self.name_last_node('stmt')
                self._token(';')

                self._define(
                    ['stmt'],
                    []
                )
            self._error(
                'expecting one of: '
                "'skip' <assignment> <goto> <ifelse>"
                '<label> <labled_statement> <print>'
                '<stmt>'
            )

    @tatsumasu('LabledStatement')
    def _labled_statement_(self):  # noqa
        self._label_()
        self.name_last_node('label')
        self._token(':')
        self._stmt_()
        self.name_last_node('stmt')

        self._define(
            ['label', 'stmt'],
            []
        )

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._assignment_()
            with self._option():
                self._token('skip')
            with self._option():
                self._ifelse_()
            with self._option():
                self._goto_()
            with self._option():
                self._print_()
            self._error(
                'expecting one of: '
                "'goto' 'ifelse' 'print' 'skip'"
                '<assignment> <varname>'
            )

    @tatsumasu('Assignment')
    def _assignment_(self):  # noqa
        self._varname_()
        self.name_last_node('varname')
        self._token('=')
        self._intexpr_()
        self.name_last_node('expr')

        self._define(
            ['expr', 'varname'],
            []
        )

    @tatsumasu('IfElse')
    def _ifelse_(self):  # noqa
        self._token('ifelse')
        self._token('(')
        self._cut()
        self._boolexpr_()
        self.name_last_node('pred')
        self._token(',')
        self._stmt_()
        self.name_last_node('true_stmt')
        self._token(',')
        self._stmt_()
        self.name_last_node('false_stmt')
        self._token(')')

        self._define(
            ['false_stmt', 'pred', 'true_stmt'],
            []
        )

    @tatsumasu('GoTo')
    def _goto_(self):  # noqa
        self._token('goto')
        self._label_()
        self.name_last_node('label')

        self._define(
            ['label'],
            []
        )

    @tatsumasu('Print')
    def _print_(self):  # noqa
        self._token('print')
        self._token('(')
        self._varname_()
        self.name_last_node('varname')
        self._token(')')

        self._define(
            ['varname'],
            []
        )

    @tatsumasu()
    def _integer_(self):  # noqa
        self._pattern('\\d+')

    @tatsumasu()
    def _varname_(self):  # noqa
        self._identifier_()

    @tatsumasu()
    def _label_(self):  # noqa
        self._identifier_()

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern('[a-zA-Z_][a-zA-Z0-9_]*')


class ZahlenSemantics:
    def start(self, ast):  # noqa
        return ast

    def intexpr(self, ast):  # noqa
        return ast

    def int_term(self, ast):  # noqa
        return ast

    def int_factor(self, ast):  # noqa
        return ast

    def boolexpr(self, ast):  # noqa
        return ast

    def bool_subexpr(self, ast):  # noqa
        return ast

    def bool_factor(self, ast):  # noqa
        return ast

    def stmts(self, ast):  # noqa
        return ast

    def labled_statement(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def assignment(self, ast):  # noqa
        return ast

    def ifelse(self, ast):  # noqa
        return ast

    def goto(self, ast):  # noqa
        return ast

    def print(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def varname(self, ast):  # noqa
        return ast

    def label(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = ZahlenParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, ZahlenParser, name='Zahlen')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
