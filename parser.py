#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class ZahlenBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re='#.*?$',
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class ZahlenParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re='#.*?$',
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu('Program')
    def _start_(self):  # noqa

        def block0():
            self._stmts_()
            self.add_last_node_to_name('statements')
        self._positive_closure(block0)
        self._check_eof()

        self._define(
            [],
            ['statements']
        )

    @tatsumasu()
    @nomemo
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._intexpr_()
            with self._option():
                self._boolexpr_()
            self._error(
                'expecting one of: '
                '<addition_expr> <boolexpr> <comparison>'
                '<intexpr> <logical_expr>'
                '<multiplication>'
            )

    @tatsumasu()
    @nomemo
    def _intexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._addition_expr_()
            with self._option():
                self._multiplication_()
            self._error(
                'expecting one of: '
                '<addition_expr> <int_factor>'
                '<multiplication> <multiplication_expr>'
            )

    @tatsumasu('BinaryIntExpr')
    @nomemo
    def _addition_expr_(self):  # noqa
        self._multiplication_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error(
                    'expecting one of: '
                    "'+' '-'"
                )
        self.name_last_node('op')
        self._cut()
        self._intexpr_()
        self.name_last_node('right')

        self._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    @leftrec
    def _multiplication_(self):  # noqa
        with self._choice():
            with self._option():
                self._multiplication_expr_()
            with self._option():
                self._int_factor_()
            self._error(
                'expecting one of: '
                '<int_factor> <integer> <multiplication>'
                '<multiplication_expr> <varname>'
            )

    @tatsumasu('BinaryIntExpr')
    @nomemo
    def _multiplication_expr_(self):  # noqa
        self._multiplication_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                with self._option():
                    self._token('/')
                self._error(
                    'expecting one of: '
                    "'*' '/'"
                )
        self.name_last_node('op')
        self._cut()
        self._int_factor_()
        self.name_last_node('right')

        self._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    def _int_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._integer_()
            with self._option():
                self._varname_()
            self._error(
                'expecting one of: '
                '<identifier> <integer> <varname> \\d+'
            )

    @tatsumasu()
    def _boolexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._logical_expr_()
            with self._option():
                self._comparison_()
            self._error(
                'expecting one of: '
                '<bool_factor> <comparison>'
                '<comparison_expr> <logical_expr>'
            )

    @tatsumasu('BinaryBoolExpr')
    def _logical_expr_(self):  # noqa
        self._comparison_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('&&')
                with self._option():
                    self._token('||')
                self._error(
                    'expecting one of: '
                    "'&&' '||'"
                )
        self.name_last_node('op')
        self._boolexpr_()
        self.name_last_node('right')

        self._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    def _comparison_(self):  # noqa
        with self._choice():
            with self._option():
                self._comparison_expr_()
            with self._option():
                self._bool_factor_()
            self._error(
                'expecting one of: '
                '<addition_expr> <bool_factor>'
                '<bool_value> <comparison_expr> <intexpr>'
                '<multiplication>'
            )

    @tatsumasu('BinaryBoolExpr')
    def _comparison_expr_(self):  # noqa
        self._intexpr_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('==')
                with self._option():
                    self._token('!=')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                self._error(
                    'expecting one of: '
                    "'!=' '<' '<=' '==' '>' '>='"
                )
        self.name_last_node('op')
        self._expression_()
        self.name_last_node('right')

        self._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    def _bool_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._bool_value_()
            with self._option():
                self._intexpr_()
            self._error(
                'expecting one of: '
                "'false' 'true' <addition_expr>"
                '<bool_value> <int_factor> <intexpr>'
                '<multiplication> <multiplication_expr>'
            )

    @tatsumasu('Boolean')
    def _bool_value_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
                self.name_last_node('value')
            with self._option():
                self._token('false')
                self.name_last_node('value')
            self._error(
                'expecting one of: '
                "'false' 'true'"
            )

    @tatsumasu('LabeledStatement')
    def _labeled_statement_(self):  # noqa
        self._label_()
        self.name_last_node('label')
        self._token(':')
        self._cut()
        self._stmt_()
        self.name_last_node('stmt')

        self._define(
            ['label', 'stmt'],
            []
        )

    @tatsumasu()
    def _stmts_(self):  # noqa
        with self._choice():
            with self._option():
                self._stmt_()
                self.name_last_node('@')
                self._token(';')
            with self._option():
                self._labeled_statement_()
                self.name_last_node('@')
                self._token(';')
            self._error(
                'expecting one of: '
                '<assignment> <goto> <identifier>'
                '<ifelse> <label> <labeled_statement>'
                '<print> <skip> <stmt>'
            )

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._assignment_()
            with self._option():
                self._skip_()
            with self._option():
                self._ifelse_()
            with self._option():
                self._goto_()
            with self._option():
                self._print_()
            self._error(
                'expecting one of: '
                "'goto' 'ifelse' 'print' 'skip'"
                '<assignment> <varname>'
            )

    @tatsumasu()
    def _assignment_rhs_(self):  # noqa
        with self._choice():
            with self._option():
                self._intexpr_()
            with self._option():
                self._varname_()
            with self._option():
                self._integer_()
            self._error(
                'expecting one of: '
                '<addition_expr> <identifier>'
                '<int_factor> <integer> <intexpr>'
                '<multiplication> <multiplication_expr>'
                '<varname> \\d+'
            )

    @tatsumasu('Assignment')
    def _assignment_(self):  # noqa
        self._varname_()
        self.name_last_node('varname')
        self._token('=')
        self._assignment_rhs_()
        self.name_last_node('rhs')

        self._define(
            ['rhs', 'varname'],
            []
        )

    @tatsumasu('Skip')
    def _skip_(self):  # noqa
        self._token('skip')

    @tatsumasu('IfElse')
    def _ifelse_(self):  # noqa
        self._token('ifelse')
        self._token('(')
        self._cut()
        self._boolexpr_()
        self.name_last_node('pred')
        self._token(',')
        self._stmt_()
        self.name_last_node('true_stmt')
        self._token(',')
        self._stmt_()
        self.name_last_node('false_stmt')
        self._token(')')

        self._define(
            ['false_stmt', 'pred', 'true_stmt'],
            []
        )

    @tatsumasu('GoTo')
    def _goto_(self):  # noqa
        self._token('goto')
        self._label_()
        self.name_last_node('label')

        self._define(
            ['label'],
            []
        )

    @tatsumasu('Print')
    def _print_(self):  # noqa
        self._token('print')
        self._token('(')
        self._varname_()
        self.name_last_node('varname')
        self._token(')')

        self._define(
            ['varname'],
            []
        )

    @tatsumasu('Integer')
    def _integer_(self):  # noqa
        with self._group():
            self._pattern('\\d+')
        self.name_last_node('value')

    @tatsumasu('Variable')
    def _varname_(self):  # noqa
        self._identifier_()
        self.name_last_node('varname')

    @tatsumasu()
    def _label_(self):  # noqa
        self._identifier_()

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern('[a-zA-Z_][a-zA-Z0-9_]*')


class ZahlenSemantics:
    def start(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def intexpr(self, ast):  # noqa
        return ast

    def addition_expr(self, ast):  # noqa
        return ast

    def multiplication(self, ast):  # noqa
        return ast

    def multiplication_expr(self, ast):  # noqa
        return ast

    def int_factor(self, ast):  # noqa
        return ast

    def boolexpr(self, ast):  # noqa
        return ast

    def logical_expr(self, ast):  # noqa
        return ast

    def comparison(self, ast):  # noqa
        return ast

    def comparison_expr(self, ast):  # noqa
        return ast

    def bool_factor(self, ast):  # noqa
        return ast

    def bool_value(self, ast):  # noqa
        return ast

    def labeled_statement(self, ast):  # noqa
        return ast

    def stmts(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def assignment_rhs(self, ast):  # noqa
        return ast

    def assignment(self, ast):  # noqa
        return ast

    def skip(self, ast):  # noqa
        return ast

    def ifelse(self, ast):  # noqa
        return ast

    def goto(self, ast):  # noqa
        return ast

    def print(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def varname(self, ast):  # noqa
        return ast

    def label(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = ZahlenParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, ZahlenParser, name='Zahlen')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
